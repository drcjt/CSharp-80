using ILCompiler.Compiler.EvaluationStack;

namespace ILCompiler.Compiler.Ssa
{
    internal class SsaRenameDominatorTreeVisitor : DominatorTreeVisitor
    {
        private readonly SsaRenameState _renameStack;
        private readonly IList<LocalVariableDescriptor> _localVariableTable;
        public SsaRenameDominatorTreeVisitor(DominatorTreeNode root, SsaRenameState renameStack, IList<LocalVariableDescriptor> localVariableTable) : base(root)
        {
            _renameStack = renameStack;
            _localVariableTable = localVariableTable;
        }

        public override void PostOrderVisit(BasicBlock block)
        {
            _renameStack.PopBlockStacks(block);
        }

        public override void PreOrderVisit(BasicBlock block)
        {
            BlockRenameVariables(block);
            // AddPhiArgsToSuccessors(block);
        }

        private void BlockRenameVariables(BasicBlock block)
        {
            // Walk nodes in statements
            var tree = block.FirstNode;
            if (tree != null)
            { 
                do
                {
                    if (tree is StoreLocalVariableEntry || tree is CallEntry)
                    {
                        RenameDefinition(tree, block);
                    }
                    else if (tree is LocalVariableEntry localVariable)
                    {
                        RenameLocalUse(localVariable, block);
                    }

                    tree = tree.Next;
                } while (tree != null);
            }   
        }

        /// <summary>
        /// Rename a local definition generated by a store or a call node
        /// </summary>
        /// <param name="defNoe"></param>
        /// <param name="block"></param>
        private void RenameDefinition(StackEntry defNode, BasicBlock block)
        {
            if (defNode is StoreLocalVariableEntry localNode)
            {
                var localNumber = localNode.LocalNumber;
                var localVariableDescriptor = _localVariableTable[localNumber];
                if (localVariableDescriptor.InSsa)
                {
                    localNode.SsaNumber = RenamePushDef(defNode, block, localNumber);
                }
            }
        }

        private void RenameLocalUse(ILocalVariable tree, BasicBlock block)
        {
            var localNumber = tree.LocalNumber;
            var localVariableDescriptor = _localVariableTable[localNumber];

            if (localVariableDescriptor.InSsa)
            {
                int ssaNumber = _renameStack.Top(localNumber);
                var ssaDescriptor = localVariableDescriptor.GetPerSsaData(ssaNumber);
                ssaDescriptor.AddUse(block);
            }
        }

        private int RenamePushDef(StackEntry defNode, BasicBlock block, int localNumber)
        {
            var localVariableDescriptor = _localVariableTable[localNumber];
            int ssaNumber = localVariableDescriptor.PerSsaData.AllocSsaNumber(() => new LocalSsaVariableDescriptor(block));

            _renameStack.Push(block, localNumber, ssaNumber);

            return ssaNumber;
        }
    }
}
