using ILCompiler.Compiler.EvaluationStack;

namespace ILCompiler.Compiler.Ssa
{
    internal class SsaRenameDominatorTreeVisitor : DominatorTreeVisitor
    {
        private readonly SsaRenameState _renameStack;
        private readonly LocalVariableTable _locals;
        public SsaRenameDominatorTreeVisitor(DominatorTreeNode root, SsaRenameState renameStack, LocalVariableTable locals) : base(root)
        {
            _renameStack = renameStack;
            _locals = locals;
        }

        public override void PostOrderVisit(BasicBlock block)
        {
            _renameStack.PopBlockStacks(block);
        }

        public override void PreOrderVisit(BasicBlock block)
        {
            BlockRenameVariables(block);
            AddPhiArgsToSuccessors(block);
        }

        private void AddPhiArgsToSuccessors(BasicBlock block)
        {
            foreach (var successor in block.Successors)
            {
                foreach (var statement in successor.Statements)
                {
                    if (statement.RootNode is StoreLocalVariableEntry store && store.Op1 is PhiNode phi)
                    {
                        var localNumber = store.LocalNumber;
                        var ssaNumber = _renameStack.Top(localNumber);

                        AddPhiArg(successor, statement, phi, localNumber, ssaNumber, block);
                    }
                }
            }
        }

        private void AddPhiArg(BasicBlock block, Statement statement, PhiNode phi, int localNumber, int ssaNumber, BasicBlock predecessor)
        {
            // First check if there is already a phi arg for this predecessor, if so it should have the same ssaNumber, is so then nothing to do
            foreach (var phiArg in phi.Arguments)
            {
                if (phiArg.Block == predecessor)
                {
                    if (phiArg.SsaNumber == ssaNumber)
                    {
                        return;
                    }

                    throw new InvalidOperationException($"Cannot add Phi arg for local {localNumber} with ssaNumber {ssaNumber} when Phi arg already exists with ssaNumber {phiArg.SsaNumber}");
                }
            }

            // Need to add a new phi arg
            AddNewPhiArg(block, statement, phi, localNumber, ssaNumber, predecessor);
        }

        private void AddNewPhiArg(BasicBlock block, Statement statement, PhiNode phi, int localNumber, int ssaNumber, BasicBlock predecessor)
        {
            var localVarDescriptor = _locals[localNumber];
            var localVarType = localVarDescriptor.Type;

            var newPhiArg = new PhiArg(localVarType, localNumber, ssaNumber, predecessor);
            phi.Arguments.Add(newPhiArg);

            var existingPhiArg = phi.Prev;

            if (existingPhiArg != null)
            {
                existingPhiArg.Next = newPhiArg;
                newPhiArg.Prev = existingPhiArg;
            }

            newPhiArg.Next = phi;
            phi.Prev = newPhiArg;

            statement.TreeList.Insert(statement.TreeList.Count - 2, newPhiArg);

            var localVarSsaDescriptor = localVarDescriptor.GetPerSsaData(ssaNumber);
            localVarSsaDescriptor.AddPhiUse(block);
        }

        private void BlockRenameVariables(BasicBlock block)
        {
            // Walk nodes in statements
            foreach (var statement in block.Statements)
            {
                foreach (var tree in statement.TreeList)
                {
                    if (tree is StoreLocalVariableEntry || tree is CallEntry)
                    {
                        RenameDefinition(tree, block);
                    }
                    else if (tree is LocalVariableEntry localVariable)
                    {
                        RenameLocalUse(localVariable, block);
                    }
                }
            }
        }

        /// <summary>
        /// Rename a local definition generated by a store or a call node
        /// </summary>
        /// <param name="defNoe"></param>
        /// <param name="block"></param>
        private void RenameDefinition(StackEntry defNode, BasicBlock block)
        {
            if (defNode is StoreLocalVariableEntry localNode)
            {
                var localNumber = localNode.LocalNumber;
                var localVariableDescriptor = _locals[localNumber];
                if (localVariableDescriptor.InSsa)
                {
                    localNode.SsaNumber = RenamePushDef(localNode, block, localNumber);
                }
            }
        }

        private void RenameLocalUse(LocalVariableCommon tree, BasicBlock block)
        {
            var localNumber = tree.LocalNumber;
            var localVariableDescriptor = _locals[localNumber];

            if (localVariableDescriptor.InSsa)
            {
                int ssaNumber = _renameStack.Top(localNumber);
                var ssaDescriptor = localVariableDescriptor.GetPerSsaData(ssaNumber);
                ssaDescriptor.AddUse(block);
                tree.SsaNumber = ssaNumber;
            }
        }

        private int RenamePushDef(LocalVariableCommon defNode, BasicBlock block, int localNumber)
        {
            var localVariableDescriptor = _locals[localNumber];
            int ssaNumber = localVariableDescriptor.PerSsaData.AllocSsaNumber(() => new LocalSsaVariableDescriptor(block, defNode));

            _renameStack.Push(block, localNumber, ssaNumber);

            return ssaNumber;
        }
    }
}
